<!DOCTYPE HTML>
<html lang="en">
<head>
<meta charset="UTF-8">

<meta name="viewport" content="width=device-width, 
    user-scalable=no, initial-scale=1, maximum-scale=1, user-scalable=0" />
<meta name="apple-mobile-web-app-capable" content="yes" />
<meta name="apple-mobile-web-app-status-bar-style" content="black-translucent" />

<style type="text/css">
body { margin: 0; padding: 0; background: #000;}
canvas { display: block; margin: 0 auto; background: #fff; }
</style>

</head>

<body>
<canvas> </canvas>
<script>
window.requestAnimFrame = (function(){
  return  window.requestAnimationFrame       || 
          window.webkitRequestAnimationFrame || 
          window.mozRequestAnimationFrame    || 
          window.oRequestAnimationFrame      || 
          window.msRequestAnimationFrame     || 
          function( callback ){
            window.setTimeout(callback, 1000 / 60);
          };
})();

// namespace our game
var POP = {
    // set initial values
    HEIGHT:  480, 
    WIDTH: 320,                     // set up some initial values
    scale: 1,
    offset: {top: 0, left: 0},
    entities: [],                   // everything to render and draw
    score: {taps: 0},
    RATIO:  null,                   // we'll set the rest of these in inti function
    currentWidth:  null,
    currentHeight:  null,
    canvas: null,
    ctx:  null,
    ua: null,
    android: null,
    ios: null,
    
    init: function() {
        POP.RATIO = POP.WIDTH / POP.HEIGHT;
        POP.currentWidth = POP.WIDTH;
        POP.currentHeight = POP.HEIGHT;
        // this is our canvas element
        POP.canvas = document.getElementsByTagName('canvas')[0];
        // important, else the browser will default to 320x200
        POP.canvas.width = POP.WIDTH;
        POP.canvas.height = POP.HEIGHT;
        // canvas context enables interaction with the canvas api
        POP.ctx = POP.canvas.getContext('2d');
        POP.ua = navigator.userAgent.toLowerCase();
        // sniff out user agent, adjust window size
        POP.android = POP.ua.indexOf('android') > -1 ? true : false;
        POP.ios = ( POP.ua.indexOf('iphone') > -1 || POP.ua.indexOf('ipad') > -1  ) ? true : false;
        // screen-writing functions
        // POP.Draw.clear();
        
        // listen for clicks
        window.addEventListener('click', function(e) {
            e.preventDefault();
            POP.Input.set(e);
        }, false);

        // listen for touches
        window.addEventListener('touchstart', function(e) {
            e.preventDefault();
            POP.Input.set(e.touches[0]);
        }, false);
        window.addEventListener('touchmove', function(e) {
            e.preventDefault();
        }, false);
        window.addEventListener('touchend', function(e) {
            e.preventDefault();
        }, false);

        // we're ready to resize
        POP.resize();

        POP.loop();
        
    },
    
    resize: function() {
    
        POP.currentHeight = window.innerHeight;
        // resize the width in proportion
        // to the new height
        POP.currentWidth = POP.currentHeight * POP.RATIO;

        // this will create some extra space on the
        // page, allowing us to scroll pass
        // the address bar, and thus hide it.
        if (POP.android || POP.ios) {
            document.body.style.height = (window.innerHeight + 50) + 'px';
        }

        // set the new canvas style width & height
        // note: our canvas is still 320x480 but
        // we're essentially scaling it with CSS
        POP.canvas.style.width = POP.currentWidth + 'px';
        POP.canvas.style.height = POP.currentHeight + 'px';

        // the amount by which the css resized canvas
        // is different to the actual (480x320) size.
        POP.scale = POP.currentWidth / POP.WIDTH;
        // position of canvas in relation to
        // the screen
        POP.offset.top = POP.canvas.offsetTop;
        POP.offset.left = POP.canvas.offsetLeft;

        // we use a timeout here as some mobile
        // browsers won't scroll if there is not
        // a small delay
        window.setTimeout(function() {
                window.scrollTo(0,1);
        }, 1);
    },
    
    // this is where all entities will be moved, checked for collisions, etc.
    update: function() {
        var i;
        
        // spawn new instance of Touch if screen is tapped
        if (POP.Input.tapped) {
            // increase tap counter
            POP.score.taps += 1;
            // add the new touch
            POP.entities.push(new POP.Touch(POP.Input.x, POP.Input.y));
            // reset touch flag
            POP.Input.tapped = false;
        }
        
        // cycle through and update all entities
        for (i = 0; i < POP.entities.length; i += 1) {
            POP.entities[i].update();
            if (POP.entities[i].remove) {
                POP.entities.splice(i,1);
            }
        }
    },
    
    // this is where we draw all the entities
    render: function() {
        var i;
        
        POP.Draw.rect(0, 0, POP.WIDTH, POP.HEIGHT, '#036');
        
        //cycle through and render all entities
        for (i = 0; i < POP.entities.length; i += 1) {
            POP.entities[i].render();
        }
        
        // show taps etc info
        POP.Draw.text('Taps : ' + POP.score.taps, 10, 20, 8, '#fff');
    },
    
    // the actual loop that requests animation frame, then proceeds to update and render
    loop: function() {
        requestAnimFrame( POP.loop );
        POP.update();
        POP.render();
    }
};

POP.Draw = {
    // clear the canvas
    clear: function() {
        POP.ctx.clearRect(0,0, POP.WIDTH, POP.HEIGHT);
    },
    // draw a rectangle
    rect: function(x, y, w, h, col) {
        POP.ctx.fillStyle = col;
        POP.ctx.fillRect(x,y,w,h);
    },
    // draw a circle
    circle: function(x, y, r, col) {
        POP.ctx.fillStyle = col;
        POP.ctx.beginPath();
        POP.ctx.arc(x + 5, y + 5, r, 0,  Math.PI * 2, true);
        POP.ctx.closePath();
        POP.ctx.fill();
    },
    // draw text
    text: function(string, x, y, size, col) {
        POP.ctx.font = 'bold ' + size + 'px Sans Serif';
        POP.ctx.fillStyle = col;
        POP.ctx.fillText(string, x, y);
    }
};

POP.Input = {
    
    x: 0,
    y: 0,
    tapped: false,
    
    set: function(data) {
        this.x = (data.pageX - POP.offset.left) / POP.scale;
        this.y = (data.pageY - POP.offset.top) / POP.scale;
        this.tapped = true;
    }
};

POP.Touch = function(x, y) {
    this.type = 'touch';
    this.x = x;
    this.y = y;
    this.r = 5;
    this.growth = 1;
    this.opacity = 1;
    this.fade = 0.01;
    this.remove = false;
    
    this.update = function() {
        this.opacity -= this.fade;
        this.r += this.growth;
        this.remove = (this.opacity < 0) ? true : false;
    };
    
    this.render = function() {
        POP.Draw.circle(this.x, this.y, this.r, 'rgba(200,200,250,'+this.opacity+')');
    };
};

window.addEventListener('load', POP.init, false);
window.addEventListener('resize', POP.resize, false);
</script>

</body>
</html>
